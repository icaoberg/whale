%!PS-Adobe-3.0
%%Title: (C:\\MATLAB6p1\\work\\v2.0\\delay\\right_epf_great_m_57_93_150_250.eps)
%%Version: 1 2
%%Creator: (MATLAB, The Mathworks, Inc.)
%%CreationDate: (D:20020803034420-04'00')
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 0 488 399
%%Pages: 1
%%DocumentProcessColors: (atend)
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: l2check
%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show
72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset pdflev2
%%Version: 5.0 14
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 2
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
pathbbox
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
background length 0 gt { background aload pop setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
background length 0 gt { background aload pop setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
ext0 {
0 getrampcolor
r1 r2 eq c1x c2x eq and c1y c2y eq and
{
c1x c1y r1 0 360 arc fill
}
{
r1 r2 lt
{
/backsteps r1 rInc div floor def
/cx c1x xInc backsteps mul sub def
/cy c1y yInc backsteps mul sub def
/radius r1 rInc backsteps mul sub def
newpath
{
cx cy radius 0 360 arc
fill
radius r1 ge { exit} if
/radius radius rInc add def
/cx cx xInc add def
/cy cy yInc add def
} loop
}
{
/cx c1x def
/cy c1y def
/radius r1 def
newpath
{
cx cy radius 360 0 arcn
/cx cx xInc sub def
/cy cy yInc sub def
/radius radius rInc sub def
cx cy radius 0 360 arc
areaOfConcern ineofill not { exit } if
eofill
} loop
} ifelse
} ifelse
} if
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
r2 r1 le
{
r2 r1 eq c1x c2x eq and c1y c2y eq and
{
c1x c1y r1 0 360 arc
areaOfConcern uappend
eofill
}
{
{
cx cy radius 0 360 arc
areaOfConcern infill not { exit } if
fill
/radius radius rInc add def
/cx cx xInc add def
/cy cy yInc add def
} loop
} ifelse
}
{
{
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
areaOfConcern ineofill not { exit } if
eofill
} loop
} ifelse
} if
grestore
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica
[/N9/Helvetica 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
%%Page: 1 1
%%BeginPageSetup
{<</PageSize [488 399] /Policies << /PageSize 1 >> >> setpagedevice} stopped
userdict /pgsave save put
PDFVars begin PDF begin PDFVars/InitAll get exec
%%EndPageSetup
0 0 488 399 re
W
n
q
n
0.917007 399 487.167 -398.917 re
W
n
false setSA
n
0.917007 399 487.167 -398.917 re
[/DeviceGray] cs 1 sc
f
Q
false setSA
n
31.917 378.583 446.333 -352.083 re
[/DeviceGray] cs 1 sc
f
0 J
1 j
0.5 w
10 M
[] 0 d
n
31.917 26.5 m
31.917 378.583 l
478.25 378.583 l
478.25 26.5 l
31.917 26.5 l
S
n
31.917 26.5 m
478.25 26.5 l
31.917 26.5 m
31.917 378.583 l
31.917 26.5 m
31.917 31 l
0 sc
S
29.1667 14.4167 m
/N9 10 Tf
(0) show
n
76.5 26.5 m
76.5 31 l
S
69.5833 14.4167 m
(0.1)
[5.56 2.78 5.56 ] pdfxs
n
121.167 26.5 m
121.167 31 l
S
114.25 14.4167 m
(0.2)
[5.56 2.78 5.56 ] pdfxs
n
165.75 26.5 m
165.75 31 l
S
158.833 14.4167 m
(0.3)
[5.56 2.78 5.56 ] pdfxs
n
210.417 26.5 m
210.417 31 l
S
203.5 14.4167 m
(0.4)
[5.56 2.78 5.56 ] pdfxs
n
255.083 26.5 m
255.083 31 l
S
248.167 14.4167 m
(0.5)
[5.56 2.78 5.56 ] pdfxs
n
299.667 26.5 m
299.667 31 l
S
292.75 14.4167 m
(0.6)
[5.56 2.78 5.56 ] pdfxs
n
344.333 26.5 m
344.333 31 l
S
337.417 14.4167 m
(0.7)
[5.56 2.78 5.56 ] pdfxs
n
388.917 26.5 m
388.917 31 l
S
382 14.4167 m
(0.8)
[5.56 2.78 5.56 ] pdfxs
n
433.583 26.5 m
433.583 31 l
S
426.667 14.4167 m
(0.9)
[5.56 2.78 5.56 ] pdfxs
n
478.25 26.5 m
478.25 31 l
S
475.5 14.4167 m
(1) show
n
31.917 26.5 m
36.333 26.5 l
S
23.5 22.8333 m
(0) show
n
31.917 61.75 m
36.333 61.75 l
S
15.1667 58.0833 m
(0.1)
[5.56 2.78 5.56 ] pdfxs
n
31.917 96.917 m
36.333 96.917 l
S
15.1667 93.25 m
(0.2)
[5.56 2.78 5.56 ] pdfxs
n
31.917 132.167 m
36.333 132.167 l
S
15.1667 128.5 m
(0.3)
[5.56 2.78 5.56 ] pdfxs
n
31.917 167.333 m
36.333 167.333 l
S
15.1667 163.667 m
(0.4)
[5.56 2.78 5.56 ] pdfxs
n
31.917 202.583 m
36.333 202.583 l
S
15.1667 198.917 m
(0.5)
[5.56 2.78 5.56 ] pdfxs
n
31.917 237.833 m
36.333 237.833 l
S
15.1667 234.167 m
(0.6)
[5.56 2.78 5.56 ] pdfxs
n
31.917 273 m
36.333 273 l
S
15.1667 269.333 m
(0.7)
[5.56 2.78 5.56 ] pdfxs
n
31.917 308.167 m
36.333 308.167 l
S
15.1667 304.5 m
(0.8)
[5.56 2.78 5.56 ] pdfxs
n
31.917 343.417 m
36.333 343.417 l
S
15.1667 339.75 m
(0.9)
[5.56 2.78 5.56 ] pdfxs
n
31.917 378.583 m
36.333 378.583 l
S
23.5 374.917 m
(1) show
q
n
31.917 26.417 446.417 352.167 re
W
n
[0.5 4 ] 0 d
n
36.333 228.917 m
40.833 230.083 l
45.25 231.25 l
49.75 232.417 l
54.167 233.583 l
58.667 234.833 l
63.083 236 l
72.083 238.5 l
76.5 239.75 l
81 241.083 l
85.417 242.333 l
89.917 243.667 l
94.333 245 l
98.833 246.333 l
103.25 247.75 l
112.25 250.583 l
116.667 252 l
121.167 253.417 l
125.583 254.917 l
130.083 256.417 l
134.5 257.917 l
143.5 261.083 l
147.917 262.667 l
152.417 264.25 l
156.833 265.917 l
161.333 267.583 l
165.75 269.333 l
170.25 271.083 l
174.667 272.833 l
183.667 276.5 l
188.083 278.417 l
192.583 280.333 l
197 282.25 l
201.5 284.25 l
205.917 286.333 l
210.417 288.417 l
214.833 290.5 l
219.333 292.75 l
223.833 294.917 l
228.25 297.25 l
232.75 299.583 l
237.167 302 l
241.667 304.5 l
246.083 307 l
250.583 309.583 l
255.083 312.25 l
259.5 315 l
264 317.833 l
268.417 320.75 l
272.917 323.75 l
277.333 326.833 l
281.833 329.917 l
286.25 333.167 l
295.25 339.833 l
299.667 343.25 l
304.167 346.667 l
308.583 350.167 l
313.083 353.583 l
317.5 356.917 l
322 360.083 l
326.417 363.167 l
330.917 366 l
335.417 368.5 l
339.833 370.75 l
344.333 372.667 l
348.75 374.25 l
353.25 375.5 l
357.667 376.417 l
362.167 377.167 l
366.667 377.667 l
371.083 378 l
375.583 378.25 l
380 378.417 l
384.5 378.5 l
388.917 378.583 l
478.25 378.583 l
31.917 227.75 m
36.333 228.917 l
S
Q
n
29.833 229.833 m
34 225.667 l
34 229.833 m
29.833 225.667 l
34.25 231 m
38.417 226.833 l
38.417 231 m
34.25 226.833 l
38.75 232.167 m
42.917 228 l
42.917 232.167 m
38.75 228 l
43.167 233.333 m
47.333 229.167 l
47.333 233.333 m
43.167 229.167 l
47.667 234.5 m
51.833 230.333 l
51.833 234.5 m
47.667 230.333 l
52.083 235.667 m
56.25 231.5 l
56.25 235.667 m
52.083 231.5 l
56.583 236.917 m
60.75 232.75 l
60.75 236.917 m
56.583 232.75 l
61 238.083 m
65.167 233.917 l
65.167 238.083 m
61 233.917 l
65.5 239.333 m
69.667 235.167 l
69.667 239.333 m
65.5 235.167 l
70 240.583 m
74.167 236.417 l
74.167 240.583 m
70 236.417 l
74.417 241.833 m
78.583 237.667 l
78.583 241.833 m
74.417 237.667 l
78.917 243.167 m
83.083 239 l
83.083 243.167 m
78.917 239 l
83.333 244.417 m
87.5 240.25 l
87.5 244.417 m
83.333 240.25 l
87.833 245.75 m
92 241.583 l
92 245.75 m
87.833 241.583 l
92.25 247.083 m
96.417 242.917 l
96.417 247.083 m
92.25 242.917 l
96.75 248.417 m
100.917 244.25 l
100.917 248.417 m
96.75 244.25 l
101.167 249.833 m
105.333 245.667 l
105.333 249.833 m
101.167 245.667 l
105.667 251.25 m
109.833 247.083 l
109.833 251.25 m
105.667 247.083 l
110.167 252.667 m
114.333 248.5 l
114.333 252.667 m
110.167 248.5 l
114.583 254.083 m
118.75 249.917 l
118.75 254.083 m
114.583 249.917 l
119.083 255.5 m
123.25 251.333 l
123.25 255.5 m
119.083 251.333 l
123.5 257 m
127.667 252.833 l
127.667 257 m
123.5 252.833 l
128 258.5 m
132.167 254.333 l
132.167 258.5 m
128 254.333 l
132.417 260 m
136.583 255.833 l
136.583 260 m
132.417 255.833 l
136.917 261.583 m
141.083 257.417 l
141.083 261.583 m
136.917 257.417 l
141.417 263.167 m
145.583 259 l
145.583 263.167 m
141.417 259 l
145.833 264.75 m
150 260.583 l
150 264.75 m
145.833 260.583 l
150.333 266.333 m
154.5 262.167 l
154.5 266.333 m
150.333 262.167 l
154.75 268 m
158.917 263.833 l
158.917 268 m
154.75 263.833 l
159.25 269.667 m
163.417 265.5 l
163.417 269.667 m
159.25 265.5 l
163.667 271.417 m
167.833 267.25 l
167.833 271.417 m
163.667 267.25 l
168.167 273.167 m
172.333 269 l
172.333 273.167 m
168.167 269 l
S
n
172.583 274.917 m
176.75 270.75 l
176.75 274.917 m
172.583 270.75 l
177.083 276.75 m
181.25 272.583 l
181.25 276.75 m
177.083 272.583 l
181.583 278.583 m
185.75 274.417 l
185.75 278.583 m
181.583 274.417 l
186 280.5 m
190.167 276.333 l
190.167 280.5 m
186 276.333 l
190.5 282.417 m
194.667 278.25 l
194.667 282.417 m
190.5 278.25 l
194.917 284.333 m
199.083 280.167 l
199.083 284.333 m
194.917 280.167 l
199.417 286.333 m
203.583 282.167 l
203.583 286.333 m
199.417 282.167 l
203.833 288.417 m
208 284.25 l
208 288.417 m
203.833 284.25 l
208.333 290.5 m
212.5 286.333 l
212.5 290.5 m
208.333 286.333 l
212.75 292.583 m
216.917 288.417 l
216.917 292.583 m
212.75 288.417 l
217.25 294.833 m
221.417 290.667 l
221.417 294.833 m
217.25 290.667 l
221.75 297 m
225.917 292.833 l
225.917 297 m
221.75 292.833 l
226.167 299.333 m
230.333 295.167 l
230.333 299.333 m
226.167 295.167 l
230.667 301.667 m
234.833 297.5 l
234.833 301.667 m
230.667 297.5 l
235.083 304.083 m
239.25 299.917 l
239.25 304.083 m
235.083 299.917 l
239.583 306.583 m
243.75 302.417 l
243.75 306.583 m
239.583 302.417 l
244 309.083 m
248.167 304.917 l
248.167 309.083 m
244 304.917 l
248.5 311.667 m
252.667 307.5 l
252.667 311.667 m
248.5 307.5 l
253 314.333 m
257.167 310.167 l
257.167 314.333 m
253 310.167 l
257.417 317.083 m
261.583 312.917 l
261.583 317.083 m
257.417 312.917 l
261.917 319.917 m
266.083 315.75 l
266.083 319.917 m
261.917 315.75 l
266.333 322.833 m
270.5 318.667 l
270.5 322.833 m
266.333 318.667 l
270.833 325.833 m
275 321.667 l
275 325.833 m
270.833 321.667 l
275.25 328.917 m
279.417 324.75 l
279.417 328.917 m
275.25 324.75 l
279.75 332 m
283.917 327.833 l
283.917 332 m
279.75 327.833 l
284.167 335.25 m
288.333 331.083 l
288.333 335.25 m
284.167 331.083 l
288.667 338.583 m
292.833 334.417 l
292.833 338.583 m
288.667 334.417 l
293.167 341.917 m
297.333 337.75 l
297.333 341.917 m
293.167 337.75 l
297.583 345.333 m
301.75 341.167 l
301.75 345.333 m
297.583 341.167 l
302.083 348.75 m
306.25 344.583 l
306.25 348.75 m
302.083 344.583 l
306.5 352.25 m
310.667 348.083 l
310.667 352.25 m
306.5 348.083 l
311 355.667 m
315.167 351.5 l
315.167 355.667 m
311 351.5 l
S
n
315.417 359 m
319.583 354.833 l
319.583 359 m
315.417 354.833 l
319.917 362.167 m
324.083 358 l
324.083 362.167 m
319.917 358 l
324.333 365.25 m
328.5 361.083 l
328.5 365.25 m
324.333 361.083 l
328.833 368.083 m
333 363.917 l
333 368.083 m
328.833 363.917 l
333.333 370.583 m
337.5 366.417 l
337.5 370.583 m
333.333 366.417 l
337.75 372.833 m
341.917 368.667 l
341.917 372.833 m
337.75 368.667 l
342.25 374.75 m
346.417 370.583 l
346.417 374.75 m
342.25 370.583 l
346.667 376.333 m
350.833 372.167 l
350.833 376.333 m
346.667 372.167 l
351.167 377.583 m
355.333 373.417 l
355.333 377.583 m
351.167 373.417 l
355.583 378.5 m
359.75 374.333 l
359.75 378.5 m
355.583 374.333 l
360.083 379.25 m
364.25 375.083 l
364.25 379.25 m
360.083 375.083 l
364.583 379.75 m
368.75 375.583 l
368.75 379.75 m
364.583 375.583 l
369 380.083 m
373.167 375.917 l
373.167 380.083 m
369 375.917 l
373.5 380.333 m
377.667 376.167 l
377.667 380.333 m
373.5 376.167 l
377.917 380.5 m
382.083 376.333 l
382.083 380.5 m
377.917 376.333 l
382.417 380.583 m
386.583 376.417 l
386.583 380.583 m
382.417 376.417 l
386.833 380.667 m
391 376.5 l
391 380.667 m
386.833 376.5 l
391.333 380.667 m
395.5 376.5 l
395.5 380.667 m
391.333 376.5 l
395.75 380.667 m
399.917 376.5 l
399.917 380.667 m
395.75 376.5 l
400.25 380.667 m
404.417 376.5 l
404.417 380.667 m
400.25 376.5 l
404.75 380.667 m
408.917 376.5 l
408.917 380.667 m
404.75 376.5 l
409.167 380.667 m
413.333 376.5 l
413.333 380.667 m
409.167 376.5 l
413.667 380.667 m
417.833 376.5 l
417.833 380.667 m
413.667 376.5 l
418.083 380.667 m
422.25 376.5 l
422.25 380.667 m
418.083 376.5 l
422.583 380.667 m
426.75 376.5 l
426.75 380.667 m
422.583 376.5 l
427 380.667 m
431.167 376.5 l
431.167 380.667 m
427 376.5 l
431.5 380.667 m
435.667 376.5 l
435.667 380.667 m
431.5 376.5 l
435.917 380.667 m
440.083 376.5 l
440.083 380.667 m
435.917 376.5 l
440.417 380.667 m
444.583 376.5 l
444.583 380.667 m
440.417 376.5 l
444.917 380.667 m
449.083 376.5 l
449.083 380.667 m
444.917 376.5 l
449.333 380.667 m
453.5 376.5 l
453.5 380.667 m
449.333 376.5 l
453.833 380.667 m
458 376.5 l
458 380.667 m
453.833 376.5 l
S
n
458.25 380.667 m
462.417 376.5 l
462.417 380.667 m
458.25 376.5 l
462.75 380.667 m
466.917 376.5 l
466.917 380.667 m
462.75 376.5 l
467.167 380.667 m
471.333 376.5 l
471.333 380.667 m
467.167 376.5 l
471.667 380.667 m
475.833 376.5 l
475.833 380.667 m
471.667 376.5 l
S
n
476.167 380.667 m
480.333 376.5 l
480.333 380.667 m
476.167 376.5 l
S
q
n
31.917 26.417 446.417 352.167 re
W
n
[0.5 4 ] 0 d
n
36.333 122.25 m
40.833 121.75 l
45.25 121.25 l
49.75 120.667 l
54.167 120.167 l
58.667 119.583 l
63.083 119 l
72.083 117.833 l
76.5 117.25 l
81 116.667 l
85.417 116 l
89.917 115.417 l
94.333 114.75 l
98.833 114.083 l
103.25 113.417 l
107.75 112.667 l
112.25 112 l
116.667 111.25 l
121.167 110.5 l
125.583 109.75 l
130.083 109 l
134.5 108.167 l
143.5 106.5 l
147.917 105.667 l
152.417 104.75 l
156.833 103.833 l
161.333 102.917 l
165.75 101.917 l
170.25 101 l
174.667 100 l
183.667 97.833 l
188.083 96.75 l
192.583 95.583 l
197 94.5 l
201.5 93.25 l
205.917 92 l
210.417 90.75 l
214.833 89.417 l
219.333 88.083 l
223.833 86.667 l
228.25 85.167 l
232.75 83.667 l
237.167 82.167 l
241.667 80.5 l
246.083 78.833 l
250.583 77.167 l
255.083 75.333 l
259.5 73.5 l
264 71.583 l
268.417 69.583 l
272.917 67.5 l
277.333 65.333 l
281.833 63.167 l
286.25 60.833 l
290.75 58.5 l
295.25 56 l
299.667 53.583 l
304.167 51 l
308.583 48.5 l
313.083 45.917 l
317.5 43.417 l
322 41 l
326.417 38.667 l
330.917 36.5 l
335.417 34.5 l
339.833 32.833 l
344.333 31.333 l
348.75 30.083 l
353.25 29.083 l
357.667 28.333 l
362.167 27.75 l
366.667 27.333 l
371.083 27.083 l
375.583 26.833 l
380 26.75 l
384.5 26.667 l
388.917 26.583 l
473.75 26.583 l
478.25 26.5 l
31.917 122.75 m
36.333 122.25 l
S
Q
n
34.92 122.7 m
34.92 121.044 33.576 119.7 31.92 119.7 c
30.264 119.7 28.92 121.044 28.92 122.7 c
28.92 124.356 30.264 125.7 31.92 125.7 c
33.576 125.7 34.92 124.356 34.92 122.7 c
39.36 122.22 m
39.36 120.564 38.016 119.22 36.36 119.22 c
34.704 119.22 33.36 120.564 33.36 122.22 c
33.36 123.876 34.704 125.22 36.36 125.22 c
38.016 125.22 39.36 123.876 39.36 122.22 c
43.8 121.74 m
43.8 120.084 42.456 118.74 40.8 118.74 c
39.144 118.74 37.8 120.084 37.8 121.74 c
37.8 123.396 39.144 124.74 40.8 124.74 c
42.456 124.74 43.8 123.396 43.8 121.74 c
48.24 121.26 m
48.24 119.604 46.896 118.26 45.24 118.26 c
43.584 118.26 42.24 119.604 42.24 121.26 c
42.24 122.916 43.584 124.26 45.24 124.26 c
46.896 124.26 48.24 122.916 48.24 121.26 c
52.8 120.66 m
52.8 119.004 51.456 117.66 49.8 117.66 c
48.144 117.66 46.8 119.004 46.8 120.66 c
46.8 122.316 48.144 123.66 49.8 123.66 c
51.456 123.66 52.8 122.316 52.8 120.66 c
57.12 120.18 m
57.12 118.524 55.776 117.18 54.12 117.18 c
52.464 117.18 51.12 118.524 51.12 120.18 c
51.12 121.836 52.464 123.18 54.12 123.18 c
55.776 123.18 57.12 121.836 57.12 120.18 c
61.68 119.58 m
61.68 117.924 60.336 116.58 58.68 116.58 c
57.024 116.58 55.68 117.924 55.68 119.58 c
55.68 121.236 57.024 122.58 58.68 122.58 c
60.336 122.58 61.68 121.236 61.68 119.58 c
66.12 118.98 m
66.12 117.324 64.776 115.98 63.12 115.98 c
61.464 115.98 60.12 117.324 60.12 118.98 c
60.12 120.636 61.464 121.98 63.12 121.98 c
64.776 121.98 66.12 120.636 66.12 118.98 c
70.56 118.38 m
70.56 116.724 69.216 115.38 67.56 115.38 c
65.904 115.38 64.56 116.724 64.56 118.38 c
64.56 120.036 65.904 121.38 67.56 121.38 c
69.216 121.38 70.56 120.036 70.56 118.38 c
75.12 117.78 m
75.12 116.124 73.776 114.78 72.12 114.78 c
70.464 114.78 69.12 116.124 69.12 117.78 c
69.12 119.436 70.464 120.78 72.12 120.78 c
73.776 120.78 75.12 119.436 75.12 117.78 c
79.5 117.3 m
79.5 115.644 78.156 114.3 76.5 114.3 c
74.844 114.3 73.5 115.644 73.5 117.3 c
73.5 118.956 74.844 120.3 76.5 120.3 c
78.156 120.3 79.5 118.956 79.5 117.3 c
84 116.7 m
84 115.044 82.656 113.7 81 113.7 c
79.344 113.7 78 115.044 78 116.7 c
78 118.356 79.344 119.7 81 119.7 c
82.656 119.7 84 118.356 84 116.7 c
88.44 115.98 m
88.44 114.324 87.096 112.98 85.44 112.98 c
83.784 112.98 82.44 114.324 82.44 115.98 c
82.44 117.636 83.784 118.98 85.44 118.98 c
87.096 118.98 88.44 117.636 88.44 115.98 c
92.88 115.38 m
92.88 113.724 91.536 112.38 89.88 112.38 c
88.224 112.38 86.88 113.724 86.88 115.38 c
86.88 117.036 88.224 118.38 89.88 118.38 c
91.536 118.38 92.88 117.036 92.88 115.38 c
97.32 114.78 m
97.32 113.124 95.976 111.78 94.32 111.78 c
92.664 111.78 91.32 113.124 91.32 114.78 c
91.32 116.436 92.664 117.78 94.32 117.78 c
95.976 117.78 97.32 116.436 97.32 114.78 c
101.88 114.06 m
101.88 112.404 100.536 111.06 98.88 111.06 c
97.224 111.06 95.88 112.404 95.88 114.06 c
95.88 115.716 97.224 117.06 98.88 117.06 c
100.536 117.06 101.88 115.716 101.88 114.06 c
106.2 113.46 m
106.2 111.804 104.856 110.46 103.2 110.46 c
101.544 110.46 100.2 111.804 100.2 113.46 c
100.2 115.116 101.544 116.46 103.2 116.46 c
104.856 116.46 106.2 115.116 106.2 113.46 c
110.76 112.62 m
110.76 110.964 109.416 109.62 107.76 109.62 c
106.104 109.62 104.76 110.964 104.76 112.62 c
104.76 114.276 106.104 115.62 107.76 115.62 c
109.416 115.62 110.76 114.276 110.76 112.62 c
115.2 112.02 m
115.2 110.364 113.856 109.02 112.2 109.02 c
110.544 109.02 109.2 110.364 109.2 112.02 c
109.2 113.676 110.544 115.02 112.2 115.02 c
113.856 115.02 115.2 113.676 115.2 112.02 c
119.64 111.3 m
119.64 109.644 118.296 108.3 116.64 108.3 c
114.984 108.3 113.64 109.644 113.64 111.3 c
113.64 112.956 114.984 114.3 116.64 114.3 c
118.296 114.3 119.64 112.956 119.64 111.3 c
124.2 110.46 m
124.2 108.804 122.856 107.46 121.2 107.46 c
119.544 107.46 118.2 108.804 118.2 110.46 c
118.2 112.116 119.544 113.46 121.2 113.46 c
122.856 113.46 124.2 112.116 124.2 110.46 c
128.64 109.74 m
128.64 108.084 127.296 106.74 125.64 106.74 c
123.984 106.74 122.64 108.084 122.64 109.74 c
122.64 111.396 123.984 112.74 125.64 112.74 c
127.296 112.74 128.64 111.396 128.64 109.74 c
133.08 109.02 m
133.08 107.364 131.736 106.02 130.08 106.02 c
128.424 106.02 127.08 107.364 127.08 109.02 c
127.08 110.676 128.424 112.02 130.08 112.02 c
131.736 112.02 133.08 110.676 133.08 109.02 c
137.52 108.18 m
137.52 106.524 136.176 105.18 134.52 105.18 c
132.864 105.18 131.52 106.524 131.52 108.18 c
131.52 109.836 132.864 111.18 134.52 111.18 c
136.176 111.18 137.52 109.836 137.52 108.18 c
141.96 107.34 m
141.96 105.684 140.616 104.34 138.96 104.34 c
137.304 104.34 135.96 105.684 135.96 107.34 c
135.96 108.996 137.304 110.34 138.96 110.34 c
140.616 110.34 141.96 108.996 141.96 107.34 c
146.52 106.5 m
146.52 104.844 145.176 103.5 143.52 103.5 c
141.864 103.5 140.52 104.844 140.52 106.5 c
140.52 108.156 141.864 109.5 143.52 109.5 c
145.176 109.5 146.52 108.156 146.52 106.5 c
S
n
150.96 105.66 m
150.96 104.004 149.616 102.66 147.96 102.66 c
146.304 102.66 144.96 104.004 144.96 105.66 c
144.96 107.316 146.304 108.66 147.96 108.66 c
149.616 108.66 150.96 107.316 150.96 105.66 c
155.4 104.7 m
155.4 103.044 154.056 101.7 152.4 101.7 c
150.744 101.7 149.4 103.044 149.4 104.7 c
149.4 106.356 150.744 107.7 152.4 107.7 c
154.056 107.7 155.4 106.356 155.4 104.7 c
159.84 103.86 m
159.84 102.204 158.496 100.86 156.84 100.86 c
155.184 100.86 153.84 102.204 153.84 103.86 c
153.84 105.516 155.184 106.86 156.84 106.86 c
158.496 106.86 159.84 105.516 159.84 103.86 c
164.28 102.9 m
164.28 101.244 162.936 99.9 161.28 99.9 c
159.624 99.9 158.28 101.244 158.28 102.9 c
158.28 104.556 159.624 105.9 161.28 105.9 c
162.936 105.9 164.28 104.556 164.28 102.9 c
168.72 101.94 m
168.72 100.284 167.376 98.94 165.72 98.94 c
164.064 98.94 162.72 100.284 162.72 101.94 c
162.72 103.596 164.064 104.94 165.72 104.94 c
167.376 104.94 168.72 103.596 168.72 101.94 c
173.28 100.98 m
173.28 99.324 171.936 97.98 170.28 97.98 c
168.624 97.98 167.28 99.324 167.28 100.98 c
167.28 102.636 168.624 103.98 170.28 103.98 c
171.936 103.98 173.28 102.636 173.28 100.98 c
177.72 100.02 m
177.72 98.364 176.376 97.02 174.72 97.02 c
173.064 97.02 171.72 98.364 171.72 100.02 c
171.72 101.676 173.064 103.02 174.72 103.02 c
176.376 103.02 177.72 101.676 177.72 100.02 c
182.16 98.94 m
182.16 97.284 180.816 95.94 179.16 95.94 c
177.504 95.94 176.16 97.284 176.16 98.94 c
176.16 100.596 177.504 101.94 179.16 101.94 c
180.816 101.94 182.16 100.596 182.16 98.94 c
186.72 97.86 m
186.72 96.204 185.376 94.86 183.72 94.86 c
182.064 94.86 180.72 96.204 180.72 97.86 c
180.72 99.516 182.064 100.86 183.72 100.86 c
185.376 100.86 186.72 99.516 186.72 97.86 c
191.04 96.78 m
191.04 95.124 189.696 93.78 188.04 93.78 c
186.384 93.78 185.04 95.124 185.04 96.78 c
185.04 98.436 186.384 99.78 188.04 99.78 c
189.696 99.78 191.04 98.436 191.04 96.78 c
195.6 95.58 m
195.6 93.924 194.256 92.58 192.6 92.58 c
190.944 92.58 189.6 93.924 189.6 95.58 c
189.6 97.236 190.944 98.58 192.6 98.58 c
194.256 98.58 195.6 97.236 195.6 95.58 c
200.04 94.5 m
200.04 92.844 198.696 91.5 197.04 91.5 c
195.384 91.5 194.04 92.844 194.04 94.5 c
194.04 96.156 195.384 97.5 197.04 97.5 c
198.696 97.5 200.04 96.156 200.04 94.5 c
204.48 93.3 m
204.48 91.644 203.136 90.3 201.48 90.3 c
199.824 90.3 198.48 91.644 198.48 93.3 c
198.48 94.956 199.824 96.3 201.48 96.3 c
203.136 96.3 204.48 94.956 204.48 93.3 c
208.92 91.98 m
208.92 90.324 207.576 88.98 205.92 88.98 c
204.264 88.98 202.92 90.324 202.92 91.98 c
202.92 93.636 204.264 94.98 205.92 94.98 c
207.576 94.98 208.92 93.636 208.92 91.98 c
213.36 90.78 m
213.36 89.124 212.016 87.78 210.36 87.78 c
208.704 87.78 207.36 89.124 207.36 90.78 c
207.36 92.436 208.704 93.78 210.36 93.78 c
212.016 93.78 213.36 92.436 213.36 90.78 c
217.8 89.46 m
217.8 87.804 216.456 86.46 214.8 86.46 c
213.144 86.46 211.8 87.804 211.8 89.46 c
211.8 91.116 213.144 92.46 214.8 92.46 c
216.456 92.46 217.8 91.116 217.8 89.46 c
222.36 88.14 m
222.36 86.484 221.016 85.14 219.36 85.14 c
217.704 85.14 216.36 86.484 216.36 88.14 c
216.36 89.796 217.704 91.14 219.36 91.14 c
221.016 91.14 222.36 89.796 222.36 88.14 c
226.8 86.7 m
226.8 85.044 225.456 83.7 223.8 83.7 c
222.144 83.7 220.8 85.044 220.8 86.7 c
220.8 88.356 222.144 89.7 223.8 89.7 c
225.456 89.7 226.8 88.356 226.8 86.7 c
231.24 85.14 m
231.24 83.484 229.896 82.14 228.24 82.14 c
226.584 82.14 225.24 83.484 225.24 85.14 c
225.24 86.796 226.584 88.14 228.24 88.14 c
229.896 88.14 231.24 86.796 231.24 85.14 c
235.8 83.7 m
235.8 82.044 234.456 80.7 232.8 80.7 c
231.144 80.7 229.8 82.044 229.8 83.7 c
229.8 85.356 231.144 86.7 232.8 86.7 c
234.456 86.7 235.8 85.356 235.8 83.7 c
240.12 82.14 m
240.12 80.484 238.776 79.14 237.12 79.14 c
235.464 79.14 234.12 80.484 234.12 82.14 c
234.12 83.796 235.464 85.14 237.12 85.14 c
238.776 85.14 240.12 83.796 240.12 82.14 c
244.68 80.46 m
244.68 78.804 243.336 77.46 241.68 77.46 c
240.024 77.46 238.68 78.804 238.68 80.46 c
238.68 82.116 240.024 83.46 241.68 83.46 c
243.336 83.46 244.68 82.116 244.68 80.46 c
249.12 78.78 m
249.12 77.124 247.776 75.78 246.12 75.78 c
244.464 75.78 243.12 77.124 243.12 78.78 c
243.12 80.436 244.464 81.78 246.12 81.78 c
247.776 81.78 249.12 80.436 249.12 78.78 c
253.56 77.22 m
253.56 75.564 252.216 74.22 250.56 74.22 c
248.904 74.22 247.56 75.564 247.56 77.22 c
247.56 78.876 248.904 80.22 250.56 80.22 c
252.216 80.22 253.56 78.876 253.56 77.22 c
258.12 75.3 m
258.12 73.644 256.776 72.3 255.12 72.3 c
253.464 72.3 252.12 73.644 252.12 75.3 c
252.12 76.956 253.464 78.3 255.12 78.3 c
256.776 78.3 258.12 76.956 258.12 75.3 c
262.5 73.5 m
262.5 71.844 261.156 70.5 259.5 70.5 c
257.844 70.5 256.5 71.844 256.5 73.5 c
256.5 75.156 257.844 76.5 259.5 76.5 c
261.156 76.5 262.5 75.156 262.5 73.5 c
S
n
267 71.58 m
267 69.924 265.656 68.58 264 68.58 c
262.344 68.58 261 69.924 261 71.58 c
261 73.236 262.344 74.58 264 74.58 c
265.656 74.58 267 73.236 267 71.58 c
271.44 69.54 m
271.44 67.884 270.096 66.54 268.44 66.54 c
266.784 66.54 265.44 67.884 265.44 69.54 c
265.44 71.196 266.784 72.54 268.44 72.54 c
270.096 72.54 271.44 71.196 271.44 69.54 c
275.88 67.5 m
275.88 65.844 274.536 64.5 272.88 64.5 c
271.224 64.5 269.88 65.844 269.88 67.5 c
269.88 69.156 271.224 70.5 272.88 70.5 c
274.536 70.5 275.88 69.156 275.88 67.5 c
280.32 65.34 m
280.32 63.684 278.976 62.34 277.32 62.34 c
275.664 62.34 274.32 63.684 274.32 65.34 c
274.32 66.996 275.664 68.34 277.32 68.34 c
278.976 68.34 280.32 66.996 280.32 65.34 c
284.88 63.18 m
284.88 61.524 283.536 60.18 281.88 60.18 c
280.224 60.18 278.88 61.524 278.88 63.18 c
278.88 64.836 280.224 66.18 281.88 66.18 c
283.536 66.18 284.88 64.836 284.88 63.18 c
289.2 60.78 m
289.2 59.124 287.856 57.78 286.2 57.78 c
284.544 57.78 283.2 59.124 283.2 60.78 c
283.2 62.436 284.544 63.78 286.2 63.78 c
287.856 63.78 289.2 62.436 289.2 60.78 c
293.76 58.5 m
293.76 56.844 292.416 55.5 290.76 55.5 c
289.104 55.5 287.76 56.844 287.76 58.5 c
287.76 60.156 289.104 61.5 290.76 61.5 c
292.416 61.5 293.76 60.156 293.76 58.5 c
298.2 55.98 m
298.2 54.324 296.856 52.98 295.2 52.98 c
293.544 52.98 292.2 54.324 292.2 55.98 c
292.2 57.636 293.544 58.98 295.2 58.98 c
296.856 58.98 298.2 57.636 298.2 55.98 c
302.64 53.58 m
302.64 51.924 301.296 50.58 299.64 50.58 c
297.984 50.58 296.64 51.924 296.64 53.58 c
296.64 55.236 297.984 56.58 299.64 56.58 c
301.296 56.58 302.64 55.236 302.64 53.58 c
307.2 51 m
307.2 49.344 305.856 48 304.2 48 c
302.544 48 301.2 49.344 301.2 51 c
301.2 52.656 302.544 54 304.2 54 c
305.856 54 307.2 52.656 307.2 51 c
311.64 48.54 m
311.64 46.884 310.296 45.54 308.64 45.54 c
306.984 45.54 305.64 46.884 305.64 48.54 c
305.64 50.196 306.984 51.54 308.64 51.54 c
310.296 51.54 311.64 50.196 311.64 48.54 c
316.08 45.9 m
316.08 44.244 314.736 42.9 313.08 42.9 c
311.424 42.9 310.08 44.244 310.08 45.9 c
310.08 47.556 311.424 48.9 313.08 48.9 c
314.736 48.9 316.08 47.556 316.08 45.9 c
320.52 43.38 m
320.52 41.724 319.176 40.38 317.52 40.38 c
315.864 40.38 314.52 41.724 314.52 43.38 c
314.52 45.036 315.864 46.38 317.52 46.38 c
319.176 46.38 320.52 45.036 320.52 43.38 c
324.96 40.98 m
324.96 39.324 323.616 37.98 321.96 37.98 c
320.304 37.98 318.96 39.324 318.96 40.98 c
318.96 42.636 320.304 43.98 321.96 43.98 c
323.616 43.98 324.96 42.636 324.96 40.98 c
329.4 38.7 m
329.4 37.044 328.056 35.7 326.4 35.7 c
324.744 35.7 323.4 37.044 323.4 38.7 c
323.4 40.356 324.744 41.7 326.4 41.7 c
328.056 41.7 329.4 40.356 329.4 38.7 c
333.96 36.54 m
333.96 34.884 332.616 33.54 330.96 33.54 c
329.304 33.54 327.96 34.884 327.96 36.54 c
327.96 38.196 329.304 39.54 330.96 39.54 c
332.616 39.54 333.96 38.196 333.96 36.54 c
338.4 34.5 m
338.4 32.844 337.056 31.5 335.4 31.5 c
333.744 31.5 332.4 32.844 332.4 34.5 c
332.4 36.156 333.744 37.5 335.4 37.5 c
337.056 37.5 338.4 36.156 338.4 34.5 c
342.84 32.82 m
342.84 31.164 341.496 29.82 339.84 29.82 c
338.184 29.82 336.84 31.164 336.84 32.82 c
336.84 34.476 338.184 35.82 339.84 35.82 c
341.496 35.82 342.84 34.476 342.84 32.82 c
347.28 31.38 m
347.28 29.724 345.936 28.38 344.28 28.38 c
342.624 28.38 341.28 29.724 341.28 31.38 c
341.28 33.036 342.624 34.38 344.28 34.38 c
345.936 34.38 347.28 33.036 347.28 31.38 c
351.72 30.06 m
351.72 28.404 350.376 27.06 348.72 27.06 c
347.064 27.06 345.72 28.404 345.72 30.06 c
345.72 31.716 347.064 33.06 348.72 33.06 c
350.376 33.06 351.72 31.716 351.72 30.06 c
356.28 29.1 m
356.28 27.444 354.936 26.1 353.28 26.1 c
351.624 26.1 350.28 27.444 350.28 29.1 c
350.28 30.756 351.624 32.1 353.28 32.1 c
354.936 32.1 356.28 30.756 356.28 29.1 c
360.72 28.38 m
360.72 26.724 359.376 25.38 357.72 25.38 c
356.064 25.38 354.72 26.724 354.72 28.38 c
354.72 30.036 356.064 31.38 357.72 31.38 c
359.376 31.38 360.72 30.036 360.72 28.38 c
365.16 27.78 m
365.16 26.124 363.816 24.78 362.16 24.78 c
360.504 24.78 359.16 26.124 359.16 27.78 c
359.16 29.436 360.504 30.78 362.16 30.78 c
363.816 30.78 365.16 29.436 365.16 27.78 c
369.72 27.3 m
369.72 25.644 368.376 24.3 366.72 24.3 c
365.064 24.3 363.72 25.644 363.72 27.3 c
363.72 28.956 365.064 30.3 366.72 30.3 c
368.376 30.3 369.72 28.956 369.72 27.3 c
374.04 27.06 m
374.04 25.404 372.696 24.06 371.04 24.06 c
369.384 24.06 368.04 25.404 368.04 27.06 c
368.04 28.716 369.384 30.06 371.04 30.06 c
372.696 30.06 374.04 28.716 374.04 27.06 c
378.6 26.82 m
378.6 25.164 377.256 23.82 375.6 23.82 c
373.944 23.82 372.6 25.164 372.6 26.82 c
372.6 28.476 373.944 29.82 375.6 29.82 c
377.256 29.82 378.6 28.476 378.6 26.82 c
S
n
383.04 26.7 m
383.04 25.044 381.696 23.7 380.04 23.7 c
378.384 23.7 377.04 25.044 377.04 26.7 c
377.04 28.356 378.384 29.7 380.04 29.7 c
381.696 29.7 383.04 28.356 383.04 26.7 c
387.48 26.7 m
387.48 25.044 386.136 23.7 384.48 23.7 c
382.824 23.7 381.48 25.044 381.48 26.7 c
381.48 28.356 382.824 29.7 384.48 29.7 c
386.136 29.7 387.48 28.356 387.48 26.7 c
391.92 26.58 m
391.92 24.924 390.576 23.58 388.92 23.58 c
387.264 23.58 385.92 24.924 385.92 26.58 c
385.92 28.236 387.264 29.58 388.92 29.58 c
390.576 29.58 391.92 28.236 391.92 26.58 c
396.36 26.58 m
396.36 24.924 395.016 23.58 393.36 23.58 c
391.704 23.58 390.36 24.924 390.36 26.58 c
390.36 28.236 391.704 29.58 393.36 29.58 c
395.016 29.58 396.36 28.236 396.36 26.58 c
400.8 26.58 m
400.8 24.924 399.456 23.58 397.8 23.58 c
396.144 23.58 394.8 24.924 394.8 26.58 c
394.8 28.236 396.144 29.58 397.8 29.58 c
399.456 29.58 400.8 28.236 400.8 26.58 c
405.36 26.58 m
405.36 24.924 404.016 23.58 402.36 23.58 c
400.704 23.58 399.36 24.924 399.36 26.58 c
399.36 28.236 400.704 29.58 402.36 29.58 c
404.016 29.58 405.36 28.236 405.36 26.58 c
409.8 26.58 m
409.8 24.924 408.456 23.58 406.8 23.58 c
405.144 23.58 403.8 24.924 403.8 26.58 c
403.8 28.236 405.144 29.58 406.8 29.58 c
408.456 29.58 409.8 28.236 409.8 26.58 c
414.24 26.58 m
414.24 24.924 412.896 23.58 411.24 23.58 c
409.584 23.58 408.24 24.924 408.24 26.58 c
408.24 28.236 409.584 29.58 411.24 29.58 c
412.896 29.58 414.24 28.236 414.24 26.58 c
418.8 26.58 m
418.8 24.924 417.456 23.58 415.8 23.58 c
414.144 23.58 412.8 24.924 412.8 26.58 c
412.8 28.236 414.144 29.58 415.8 29.58 c
417.456 29.58 418.8 28.236 418.8 26.58 c
423.12 26.58 m
423.12 24.924 421.776 23.58 420.12 23.58 c
418.464 23.58 417.12 24.924 417.12 26.58 c
417.12 28.236 418.464 29.58 420.12 29.58 c
421.776 29.58 423.12 28.236 423.12 26.58 c
427.68 26.58 m
427.68 24.924 426.336 23.58 424.68 23.58 c
423.024 23.58 421.68 24.924 421.68 26.58 c
421.68 28.236 423.024 29.58 424.68 29.58 c
426.336 29.58 427.68 28.236 427.68 26.58 c
432.12 26.58 m
432.12 24.924 430.776 23.58 429.12 23.58 c
427.464 23.58 426.12 24.924 426.12 26.58 c
426.12 28.236 427.464 29.58 429.12 29.58 c
430.776 29.58 432.12 28.236 432.12 26.58 c
436.56 26.58 m
436.56 24.924 435.216 23.58 433.56 23.58 c
431.904 23.58 430.56 24.924 430.56 26.58 c
430.56 28.236 431.904 29.58 433.56 29.58 c
435.216 29.58 436.56 28.236 436.56 26.58 c
441 26.58 m
441 24.924 439.656 23.58 438 23.58 c
436.344 23.58 435 24.924 435 26.58 c
435 28.236 436.344 29.58 438 29.58 c
439.656 29.58 441 28.236 441 26.58 c
445.5 26.58 m
445.5 24.924 444.156 23.58 442.5 23.58 c
440.844 23.58 439.5 24.924 439.5 26.58 c
439.5 28.236 440.844 29.58 442.5 29.58 c
444.156 29.58 445.5 28.236 445.5 26.58 c
450 26.58 m
450 24.924 448.656 23.58 447 23.58 c
445.344 23.58 444 24.924 444 26.58 c
444 28.236 445.344 29.58 447 29.58 c
448.656 29.58 450 28.236 450 26.58 c
454.44 26.58 m
454.44 24.924 453.096 23.58 451.44 23.58 c
449.784 23.58 448.44 24.924 448.44 26.58 c
448.44 28.236 449.784 29.58 451.44 29.58 c
453.096 29.58 454.44 28.236 454.44 26.58 c
458.88 26.58 m
458.88 24.924 457.536 23.58 455.88 23.58 c
454.224 23.58 452.88 24.924 452.88 26.58 c
452.88 28.236 454.224 29.58 455.88 29.58 c
457.536 29.58 458.88 28.236 458.88 26.58 c
463.32 26.58 m
463.32 24.924 461.976 23.58 460.32 23.58 c
458.664 23.58 457.32 24.924 457.32 26.58 c
457.32 28.236 458.664 29.58 460.32 29.58 c
461.976 29.58 463.32 28.236 463.32 26.58 c
467.88 26.58 m
467.88 24.924 466.536 23.58 464.88 23.58 c
463.224 23.58 461.88 24.924 461.88 26.58 c
461.88 28.236 463.224 29.58 464.88 29.58 c
466.536 29.58 467.88 28.236 467.88 26.58 c
472.2 26.58 m
472.2 24.924 470.856 23.58 469.2 23.58 c
467.544 23.58 466.2 24.924 466.2 26.58 c
466.2 28.236 467.544 29.58 469.2 29.58 c
470.856 29.58 472.2 28.236 472.2 26.58 c
476.76 26.58 m
476.76 24.924 475.416 23.58 473.76 23.58 c
472.104 23.58 470.76 24.924 470.76 26.58 c
470.76 28.236 472.104 29.58 473.76 29.58 c
475.416 29.58 476.76 28.236 476.76 26.58 c
481.2 26.46 m
481.2 24.804 479.856 23.46 478.2 23.46 c
476.544 23.46 475.2 24.804 475.2 26.46 c
475.2 28.116 476.544 29.46 478.2 29.46 c
479.856 29.46 481.2 28.116 481.2 26.46 c
S
q
n
31.917 26.417 446.417 352.167 re
W
n
[0.5 4 ] 0 d
n
36.333 80.583 m
40.833 79.917 l
45.25 79.25 l
49.75 78.583 l
54.167 78 l
58.667 77.333 l
63.083 76.667 l
72.083 75.333 l
76.5 74.667 l
81 74 l
85.417 73.333 l
89.917 72.667 l
94.333 71.917 l
98.833 71.25 l
103.25 70.583 l
107.75 69.833 l
112.25 69.167 l
116.667 68.5 l
121.167 67.75 l
125.583 67.083 l
130.083 66.333 l
134.5 65.583 l
139 64.917 l
143.5 64.167 l
147.917 63.417 l
152.417 62.667 l
156.833 61.917 l
161.333 61.167 l
165.75 60.417 l
170.25 59.667 l
174.667 58.917 l
179.167 58.167 l
183.667 57.333 l
188.083 56.583 l
192.583 55.75 l
197 55 l
201.5 54.167 l
205.917 53.417 l
210.417 52.583 l
214.833 51.75 l
223.833 50.083 l
228.25 49.25 l
232.75 48.417 l
237.167 47.583 l
241.667 46.667 l
246.083 45.833 l
250.583 45 l
255.083 44.083 l
259.5 43.167 l
264 42.25 l
268.417 41.417 l
272.917 40.5 l
277.333 39.583 l
281.833 38.583 l
286.25 37.667 l
295.25 35.833 l
299.667 34.917 l
304.167 34 l
308.583 33.083 l
313.083 32.25 l
317.5 31.417 l
322 30.583 l
326.417 29.917 l
330.917 29.25 l
335.417 28.667 l
339.833 28.167 l
344.333 27.75 l
348.75 27.417 l
353.25 27.167 l
357.667 26.917 l
362.167 26.833 l
366.667 26.75 l
371.083 26.667 l
375.583 26.583 l
469.25 26.583 l
473.75 26.5 l
478.25 26.5 l
31.917 81.167 m
36.333 80.583 l
S
Q
q
n
25.833 20.333 458.583 66.917 re
W
n
0 j
n
31.917 77.25 m
35.333 83.167 l
28.5 83.167 l
31.917 77.25 l
h
36.333 76.667 m
39.75 82.583 l
32.917 82.583 l
36.333 76.667 l
h
40.833 76 m
44.25 81.917 l
37.417 81.917 l
40.833 76 l
h
45.25 75.333 m
48.667 81.25 l
41.833 81.25 l
45.25 75.333 l
h
49.75 74.667 m
53.167 80.583 l
46.333 80.583 l
49.75 74.667 l
h
54.167 74.083 m
57.583 80 l
50.75 80 l
54.167 74.083 l
h
58.667 73.417 m
62.083 79.333 l
55.25 79.333 l
58.667 73.417 l
h
63.083 72.75 m
66.5 78.667 l
59.667 78.667 l
63.083 72.75 l
h
67.583 72.083 m
71 78 l
64.167 78 l
67.583 72.083 l
h
72.083 71.417 m
75.5 77.333 l
68.667 77.333 l
72.083 71.417 l
h
76.5 70.75 m
79.917 76.667 l
73.083 76.667 l
76.5 70.75 l
h
81 70.083 m
84.417 76 l
77.583 76 l
81 70.083 l
h
85.417 69.417 m
88.833 75.333 l
82 75.333 l
85.417 69.417 l
h
89.917 68.75 m
93.333 74.667 l
86.5 74.667 l
89.917 68.75 l
h
94.333 68 m
97.75 73.917 l
90.917 73.917 l
94.333 68 l
h
98.833 67.333 m
102.25 73.25 l
95.417 73.25 l
98.833 67.333 l
h
103.25 66.667 m
106.667 72.583 l
99.833 72.583 l
103.25 66.667 l
h
107.75 65.917 m
111.167 71.833 l
104.333 71.833 l
107.75 65.917 l
h
112.25 65.25 m
115.667 71.167 l
108.833 71.167 l
112.25 65.25 l
h
116.667 64.583 m
120.083 70.5 l
113.25 70.5 l
116.667 64.583 l
h
121.167 63.833 m
124.583 69.75 l
117.75 69.75 l
121.167 63.833 l
h
125.583 63.167 m
129 69.083 l
122.167 69.083 l
125.583 63.167 l
h
130.083 62.417 m
133.5 68.333 l
126.667 68.333 l
130.083 62.417 l
h
134.5 61.667 m
137.917 67.583 l
131.083 67.583 l
134.5 61.667 l
h
139 61 m
142.417 66.917 l
135.583 66.917 l
139 61 l
h
143.5 60.25 m
146.917 66.167 l
140.083 66.167 l
143.5 60.25 l
h
S
n
147.917 59.5 m
151.333 65.417 l
144.5 65.417 l
147.917 59.5 l
h
152.417 58.75 m
155.833 64.667 l
149 64.667 l
152.417 58.75 l
h
156.833 58 m
160.25 63.917 l
153.417 63.917 l
156.833 58 l
h
161.333 57.25 m
164.75 63.167 l
157.917 63.167 l
161.333 57.25 l
h
165.75 56.5 m
169.167 62.417 l
162.333 62.417 l
165.75 56.5 l
h
170.25 55.75 m
173.667 61.667 l
166.833 61.667 l
170.25 55.75 l
h
174.667 55 m
178.083 60.917 l
171.25 60.917 l
174.667 55 l
h
179.167 54.25 m
182.583 60.167 l
175.75 60.167 l
179.167 54.25 l
h
183.667 53.417 m
187.083 59.333 l
180.25 59.333 l
183.667 53.417 l
h
188.083 52.667 m
191.5 58.583 l
184.667 58.583 l
188.083 52.667 l
h
192.583 51.833 m
196 57.75 l
189.167 57.75 l
192.583 51.833 l
h
197 51.083 m
200.417 57 l
193.583 57 l
197 51.083 l
h
201.5 50.25 m
204.917 56.167 l
198.083 56.167 l
201.5 50.25 l
h
205.917 49.5 m
209.333 55.417 l
202.5 55.417 l
205.917 49.5 l
h
210.417 48.667 m
213.833 54.583 l
207 54.583 l
210.417 48.667 l
h
214.833 47.833 m
218.25 53.75 l
211.417 53.75 l
214.833 47.833 l
h
219.333 47 m
222.75 52.917 l
215.917 52.917 l
219.333 47 l
h
223.833 46.167 m
227.25 52.083 l
220.417 52.083 l
223.833 46.167 l
h
228.25 45.333 m
231.667 51.25 l
224.833 51.25 l
228.25 45.333 l
h
232.75 44.5 m
236.167 50.417 l
229.333 50.417 l
232.75 44.5 l
h
237.167 43.667 m
240.583 49.583 l
233.75 49.583 l
237.167 43.667 l
h
241.667 42.75 m
245.083 48.667 l
238.25 48.667 l
241.667 42.75 l
h
246.083 41.917 m
249.5 47.833 l
242.667 47.833 l
246.083 41.917 l
h
250.583 41.083 m
254 47 l
247.167 47 l
250.583 41.083 l
h
255.083 40.167 m
258.5 46.083 l
251.667 46.083 l
255.083 40.167 l
h
259.5 39.25 m
262.917 45.167 l
256.083 45.167 l
259.5 39.25 l
h
S
n
264 38.333 m
267.417 44.25 l
260.583 44.25 l
264 38.333 l
h
268.417 37.5 m
271.833 43.417 l
265 43.417 l
268.417 37.5 l
h
272.917 36.583 m
276.333 42.5 l
269.5 42.5 l
272.917 36.583 l
h
277.333 35.667 m
280.75 41.583 l
273.917 41.583 l
277.333 35.667 l
h
281.833 34.667 m
285.25 40.583 l
278.417 40.583 l
281.833 34.667 l
h
286.25 33.75 m
289.667 39.667 l
282.833 39.667 l
286.25 33.75 l
h
290.75 32.833 m
294.167 38.75 l
287.333 38.75 l
290.75 32.833 l
h
295.25 31.917 m
298.667 37.833 l
291.833 37.833 l
295.25 31.917 l
h
299.667 31 m
303.083 36.917 l
296.25 36.917 l
299.667 31 l
h
304.167 30.083 m
307.583 36 l
300.75 36 l
304.167 30.083 l
h
308.583 29.167 m
312 35.083 l
305.167 35.083 l
308.583 29.167 l
h
313.083 28.333 m
316.5 34.25 l
309.667 34.25 l
313.083 28.333 l
h
317.5 27.5 m
320.917 33.417 l
314.083 33.417 l
317.5 27.5 l
h
322 26.667 m
325.417 32.583 l
318.583 32.583 l
322 26.667 l
h
326.417 26 m
329.833 31.917 l
323 31.917 l
326.417 26 l
h
330.917 25.333 m
334.333 31.25 l
327.5 31.25 l
330.917 25.333 l
h
335.417 24.75 m
338.833 30.667 l
332 30.667 l
335.417 24.75 l
h
339.833 24.25 m
343.25 30.167 l
336.417 30.167 l
339.833 24.25 l
h
344.333 23.833 m
347.75 29.75 l
340.917 29.75 l
344.333 23.833 l
h
348.75 23.5 m
352.167 29.417 l
345.333 29.417 l
348.75 23.5 l
h
353.25 23.25 m
356.667 29.167 l
349.833 29.167 l
353.25 23.25 l
h
357.667 23 m
361.083 28.917 l
354.25 28.917 l
357.667 23 l
h
362.167 22.917 m
365.583 28.833 l
358.75 28.833 l
362.167 22.917 l
h
366.667 22.833 m
370.083 28.75 l
363.25 28.75 l
366.667 22.833 l
h
371.083 22.75 m
374.5 28.667 l
367.667 28.667 l
371.083 22.75 l
h
375.583 22.667 m
379 28.583 l
372.167 28.583 l
375.583 22.667 l
h
S
n
380 22.667 m
383.417 28.583 l
376.583 28.583 l
380 22.667 l
h
384.5 22.667 m
387.917 28.583 l
381.083 28.583 l
384.5 22.667 l
h
388.917 22.667 m
392.333 28.583 l
385.5 28.583 l
388.917 22.667 l
h
393.417 22.667 m
396.833 28.583 l
390 28.583 l
393.417 22.667 l
h
397.833 22.667 m
401.25 28.583 l
394.417 28.583 l
397.833 22.667 l
h
402.333 22.667 m
405.75 28.583 l
398.917 28.583 l
402.333 22.667 l
h
406.833 22.667 m
410.25 28.583 l
403.417 28.583 l
406.833 22.667 l
h
411.25 22.667 m
414.667 28.583 l
407.833 28.583 l
411.25 22.667 l
h
415.75 22.667 m
419.167 28.583 l
412.333 28.583 l
415.75 22.667 l
h
420.167 22.667 m
423.583 28.583 l
416.75 28.583 l
420.167 22.667 l
h
424.667 22.667 m
428.083 28.583 l
421.25 28.583 l
424.667 22.667 l
h
429.083 22.667 m
432.5 28.583 l
425.667 28.583 l
429.083 22.667 l
h
433.583 22.667 m
437 28.583 l
430.167 28.583 l
433.583 22.667 l
h
438 22.667 m
441.417 28.583 l
434.583 28.583 l
438 22.667 l
h
442.5 22.667 m
445.917 28.583 l
439.083 28.583 l
442.5 22.667 l
h
447 22.667 m
450.417 28.583 l
443.583 28.583 l
447 22.667 l
h
451.417 22.667 m
454.833 28.583 l
448 28.583 l
451.417 22.667 l
h
455.917 22.667 m
459.333 28.583 l
452.5 28.583 l
455.917 22.667 l
h
460.333 22.667 m
463.75 28.583 l
456.917 28.583 l
460.333 22.667 l
h
464.833 22.667 m
468.25 28.583 l
461.417 28.583 l
464.833 22.667 l
h
469.25 22.667 m
472.667 28.583 l
465.833 28.583 l
469.25 22.667 l
h
473.75 22.583 m
477.167 28.5 l
470.333 28.5 l
473.75 22.583 l
h
478.25 22.583 m
481.667 28.5 l
474.833 28.5 l
478.25 22.583 l
h
S
Q
238.75 2.5 m
(Epsilon)
[6.66992 5.56 5 2.21985 2.21985 5.56 5.56 ] pdfxs
10.5833 179.667 m
/N9 [0 10 -10 0 0 0] Tf
(Proportion)
[6.66992 3.32993 5.56 5.56 5.56 3.32993 2.78 2.21985 5.56 5.56 ] pdfys
70 386.5 m
/N9 10 Tf
(Epsilon vs Population Proportions with an epsilon step of = 0.01 for 250\ generations.)
[6.66992 5.56 5 2.21985 2.21985 5.56 5.56 2.78 5 5 2.78 
6.66992 5.56 5.56 5.56 2.21985 5.56 2.78 2.21985 5.56 5.56 2.78 
6.66992 3.32993 5.56 5.56 5.56 3.32993 2.78 2.21985 5.56 5.56 5 
2.78 7.21985 2.21985 2.78 5.56 2.78 5.56 5.56 2.78 5.56 5.56 
5 2.21985 2.21985 5.56 5.56 2.78 5 2.78 5.56 5.56 2.78 
5.56 2.78 2.78 5.84 2.78 5.56 2.78 5.56 5.56 2.78 2.78 
5.56 3.32993 2.78 5.56 5.56 5.56 2.78 5.56 5.56 5.56 5.56 
3.32993 5.56 2.78 2.21985 5.56 5.56 5 2.78 ] pdfxs
n
370.417 373.583 102.833 -36.417 re
1 sc
f
n
370.417 337.167 m
370.417 373.583 l
473.25 373.583 l
473.25 337.167 l
370.417 337.167 l
S
n
370.417 373.583 m
473.25 373.583 l
370.417 337.167 m
473.25 337.167 l
473.25 337.167 m
473.25 373.583 l
370.417 337.167 m
370.417 373.583 l
370.417 337.167 m
473.25 337.167 l
370.417 337.167 m
370.417 373.583 l
370.417 373.583 m
473.25 373.583 l
370.417 337.167 m
473.25 337.167 l
473.25 337.167 m
473.25 373.583 l
370.417 337.167 m
370.417 373.583 l
0 sc
S
398.167 363.417 m
(Single Females)
[6.66992 2.21985 5.56 5.56 2.21985 5.56 2.78 6.10992 5.56 8.32993 5.56 
2.21985 5.56 5 ] pdfxs
398.167 351.917 m
(Single Males)
[6.66992 2.21985 5.56 5.56 2.21985 5.56 2.78 8.32993 5.56 2.21985 5.56 
5 ] pdfxs
398.167 340.417 m
(Paired Females)
[6.66992 5.56 2.21985 3.32993 5.56 5.56 2.78 6.10992 5.56 8.32993 5.56 
2.21985 5.56 5 ] pdfxs
[0.5 4 ] 0 d
n
375.917 366.75 m
392.583 366.75 l
S
[] 0 d
n
382.167 368.833 m
386.333 364.667 l
386.333 368.833 m
382.167 364.667 l
S
[0.5 4 ] 0 d
n
375.917 355.25 m
392.583 355.25 l
S
[] 0 d
n
387.24 355.26 m
387.24 353.604 385.896 352.26 384.24 352.26 c
382.584 352.26 381.24 353.604 381.24 355.26 c
381.24 356.916 382.584 358.26 384.24 358.26 c
385.896 358.26 387.24 356.916 387.24 355.26 c
S
[0.5 4 ] 0 d
n
375.917 343.667 m
392.583 343.667 l
S
q
n
378.167 337.5 12.25 12.25 re
W
n
0 j
[] 0 d
n
384.25 339.75 m
387.667 345.667 l
380.833 345.667 l
384.25 339.75 l
h
S
Q
[] 0 d
n
468.196 340.417 m
S
PDFVars/TermAll get exec end end
userdict /pgsave get restore
showpage
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentProcessColors: Black
%%DocumentNeededResources:
%%+ font Helvetica
%%EOF
